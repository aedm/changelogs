#query PullRequests($owner: String!, $repository: String!, $branch: String!, $cursor: String) {
#  repository(owner: $owner, name: $repository) {
#    pullRequests(states: [MERGED], first: 100, baseRefName: $branch, after: $cursor,orderBy: { field: UPDATED_AT, direction: DESC }) {
#      edges {
#        cursor
#        node {
#          body
#          number
#          baseRefName
#          headRefName
#          title,
#          mergedAt,
#          updatedAt,
#          mergeCommit {
#            oid
#          }
#        }
#      }
#    }
#  }
#}

query BranchCommit($owner: String!, $repository: String!, $branch: String!) {
  repository(owner: $owner, name: $repository) {
    ref(qualifiedName: $branch) {
      name
      target {
        __typename
        ... on Commit {
          oid
        }
      }
    }
  }
}

query CommitHistory($owner: String!, $repository: String!, $oid: GitObjectID!, $cursor: String) {
  ...GetRateLimit
  repository(owner: $owner, name: $repository) {
    object(oid: $oid) {
      __typename
      ... on Commit {
        oid
        history(first: 100, after: $cursor) {
          totalCount
          edges {
            cursor
            node {
              oid
              committedDate
              ...GetPullRequests
            }
          }
        }
      }
    }
  }
}

fragment GetRateLimit on Query {
  rateLimit {
    limit
    cost
    remaining
    resetAt
  }
}

fragment GetPullRequests on Commit {
  associatedPullRequests(first: 100) {
    edges {
      node {
        number
        title
        body
        mergedAt
        mergeCommit {
          oid
        }
      }
    }
  }
}