#query PullRequests($owner: String!, $repository: String!, $cursor: String) {
#  ...GetRateLimit
#  repository(owner: $owner, name: $repository) {
#    pullRequests(states: [MERGED], first: 100, after: $cursor, orderBy: { field: UPDATED_AT, direction: DESC }) {
#      edges {
#        cursor
#        node {
#          body
#          number
#          baseRefName
#          headRefName
#          title,
#          mergedAt,
#          updatedAt,
#          author {
#            login
#          }
#          closingIssuesReferences(first: 100) {
#            totalCount
#            edges {
#              node {
#                number
#                title
#              }
#            }
#          }
#          mergeCommit {
#            oid
#          }
#        }
#      }
#    }
#  }
#}

#query PullRequestIDs($owner: String!, $repository: String!, $cursor: String) {
#  ...GetRateLimit
#  repository(owner: $owner, name: $repository) {
#    pullRequests(states: [MERGED], first: 100, after: $cursor, orderBy: { field: UPDATED_AT, direction: DESC }) {
#      edges {
#        cursor
#        node {
#          id
#        }
#      }
#    }
#  }
#}


query GetPullRequestsIdsForCommitIds($commit_ids: [ID!]!) {
  ...RateLimit
  nodes(ids: $commit_ids){
    ... on Commit {
      associatedPullRequests(first: 100) {
        nodes {
          id
        }
      }
    }
  }
}


query GetPullRequestsById($pr_ids: [ID!]!) {
  ...RateLimit
  nodes(ids: $pr_ids){
    ...on PullRequest {
      id
      number
      body
      baseRefName
      headRefName
      title,
      mergedAt,
      updatedAt,
      author {
        login
      }
      closingIssuesReferences(first: 100) {
        totalCount
        edges {
          node {
            number
            title
          }
        }
      }
      mergeCommit {
        oid
      }
    }
  }
}

query GetCommitOnBranchHead($owner: String!, $repository: String!, $branch: String!) {
  repository(owner: $owner, name: $repository) {
    ref(qualifiedName: $branch) {
      name
      target {
        __typename
        ... on Commit {
          oid
        }
      }
    }
  }
}

query GetCommitHistory($owner: String!, $repository: String!, $oid: GitObjectID!, $cursor: String) {
  ...RateLimit
  repository(owner: $owner, name: $repository) {
    object(oid: $oid) {
      __typename
      ... on Commit {
        oid
        history(first: 100, after: $cursor) {
          totalCount
          edges {
            cursor
            node {
              id
              oid
              committedDate
              parents(first: 2) {
                nodes {
                  oid
                }
              }
#              ...GetPullRequests
            }
          }
        }
      }
    }
  }
}

fragment RateLimit on Query {
  rateLimit {
    limit
    cost
    remaining
    resetAt
  }
}

#fragment GetPullRequests on Commit {
#  associatedPullRequests(first: 10) {
#    nodes {
#      id
#      number
#      mergeCommit {
#        oid
#      }
#    }
##    edges {
##      node {
##        id
##      }
##    }
#  }
#}
